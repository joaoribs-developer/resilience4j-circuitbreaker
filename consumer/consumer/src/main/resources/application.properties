server.port=8080
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG
management.health.circuitbreakers.enabled=true
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=*
# Enable health indicator for this circuit breaker
# Number of calls in the sliding window
# Type of sliding window (COUNT_BASED or TIME_BASED)
# Maximum failure rate threshold (percentage)
# Minimum number of calls before calculating the failure rate
# Time the circuit breaker stays open before transitioning to HALF_OPEN
# Number of calls allowed in HALF_OPEN state
# Threshold for considering slow calls (commented out in this example)
# Slow call duration threshold
# Custom exception recording predicate (commented out in this example)
# Enable automatic transition from OPEN to HALF_OPEN
# Buffer size for circuit breaker event consumer
resilience4j.circuitbreaker.instances.readCircuitBreaker.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.readCircuitBreaker.slidingWindowSize=10
resilience4j.circuitbreaker.instances.readCircuitBreaker.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.readCircuitBreaker.failureRateThreshold=50
resilience4j.circuitbreaker.instances.readCircuitBreaker.minimumNumberOfCalls=3
resilience4j.circuitbreaker.instances.readCircuitBreaker.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.readCircuitBreaker.permittedNumberOfCallsInHalfOpenState=3
#resilience4j.circuitbreaker.instances.readCircuitBreaker.slowCallRateThreshold=100
resilience4j.circuitbreaker.instances.readCircuitBreaker.slowCallDurationThreshold=2s
#resilience4j.circuitbreaker.instances.readCircuitBreaker.recordExceptionPredicate=com.example.exception.CustomPredicate
resilience4j.circuitbreaker.instances.readCircuitBreaker.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.readCircuitBreaker.eventConsumerBufferSize=10
